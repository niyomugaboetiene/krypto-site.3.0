/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { KryptoDAO, KryptoDAOInterface } from "../../dao.sol/KryptoDAO";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    name: "CreateProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "Execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "Executed",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "voteCount",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
        ],
        internalType: "struct KryptoDAO.Proposal[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GetProposal",
    outputs: [
      {
        internalType: "string[]",
        name: "names",
        type: "string[]",
      },
      {
        internalType: "string[]",
        name: "descriptions",
        type: "string[]",
      },
      {
        internalType: "uint256[]",
        name: "voteCounts",
        type: "uint256[]",
      },
      {
        internalType: "bool[]",
        name: "executedFlags",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "VoteProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "hasVoted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506118c98061001f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806368f46c451161005b57806368f46c451461010157806381cc0a381461011f57806389b144911461013b578063ddb556f11461015c5761007d565b8063013cf08b146100825780630df07b81146100b557806343859632146100d1575b600080fd5b61009c60048036038101906100979190610c08565b610178565b6040516100ac9493929190610cef565b60405180910390f35b6100cf60048036038101906100ca9190610e77565b6102d5565b005b6100eb60048036038101906100e69190610f4d565b610381565b6040516100f89190610f8d565b60405180910390f35b6101096103b0565b604051610116919061113c565b60405180910390f35b61013960048036038101906101349190610c08565b610558565b005b610143610758565b604051610153949392919061137e565b60405180910390f35b61017660048036038101906101719190610c08565b610a94565b005b6000818154811061018857600080fd5b90600052602060002090600402016000915090508060000180546101ab9061140e565b80601f01602080910402602001604051908101604052809291908181526020018280546101d79061140e565b80156102245780601f106101f957610100808354040283529160200191610224565b820191906000526020600020905b81548152906001019060200180831161020757829003601f168201915b5050505050908060010180546102399061140e565b80601f01602080910402602001604051908101604052809291908181526020018280546102659061140e565b80156102b25780601f10610287576101008083540402835291602001916102b2565b820191906000526020600020905b81548152906001019060200180831161029557829003601f168201915b5050505050908060020154908060030160009054906101000a900460ff16905084565b6000604051806080016040528084815260200183815260200160008152602001600015158152509080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001908161033a91906115eb565b50602082015181600101908161035091906115eb565b506040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555050505050565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561054f57838290600052602060002090600402016040518060800160405290816000820180546104079061140e565b80601f01602080910402602001604051908101604052809291908181526020018280546104339061140e565b80156104805780601f1061045557610100808354040283529160200191610480565b820191906000526020600020905b81548152906001019060200180831161046357829003601f168201915b505050505081526020016001820180546104999061140e565b80601f01602080910402602001604051908101604052809291908181526020018280546104c59061140e565b80156105125780601f106104e757610100808354040283529160200191610512565b820191906000526020600020905b8154815290600101906020018083116104f557829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900460ff161515151581525050815260200190600101906103d4565b50505050905090565b6001600082815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156105f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ed90611709565b60405180910390fd5b6000818154811061060a57610609611729565b5b906000526020600020906004020160030160009054906101000a900460ff1615610669576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610660906117a4565b60405180910390fd5b60008054905081106106b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a790611810565b60405180910390fd5b6001600082815481106106c6576106c5611729565b5b906000526020600020906004020160020160008282546106e6919061185f565b92505081905550600180600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6060806060806000808054905090508067ffffffffffffffff81111561078157610780610d4c565b5b6040519080825280602002602001820160405280156107b457816020015b606081526020019060019003908161079f5790505b5094508067ffffffffffffffff8111156107d1576107d0610d4c565b5b60405190808252806020026020018201604052801561080457816020015b60608152602001906001900390816107ef5790505b5093508067ffffffffffffffff81111561082157610820610d4c565b5b60405190808252806020026020018201604052801561084f5781602001602082028036833780820191505090505b5092508067ffffffffffffffff81111561086c5761086b610d4c565b5b60405190808252806020026020018201604052801561089a5781602001602082028036833780820191505090505b50915060005b81811015610a8c5760008082815481106108bd576108bc611729565b5b906000526020600020906004020190508060000180546108dc9061140e565b80601f01602080910402602001604051908101604052809291908181526020018280546109089061140e565b80156109555780601f1061092a57610100808354040283529160200191610955565b820191906000526020600020905b81548152906001019060200180831161093857829003601f168201915b505050505087838151811061096d5761096c611729565b5b60200260200101819052508060010180546109879061140e565b80601f01602080910402602001604051908101604052809291908181526020018280546109b39061140e565b8015610a005780601f106109d557610100808354040283529160200191610a00565b820191906000526020600020905b8154815290600101906020018083116109e357829003601f168201915b5050505050868381518110610a1857610a17611729565b5b60200260200101819052508060020154858381518110610a3b57610a3a611729565b5b6020026020010181815250508060030160009054906101000a900460ff16848381518110610a6c57610a6b611729565b5b6020026020010190151590811515815250505080806001019150506108a0565b505090919293565b6000805490508110610adb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad290611810565b60405180910390fd5b60008181548110610aef57610aee611729565b5b906000526020600020906004020160030160009054906101000a900460ff1615610b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b45906117a4565b60405180910390fd5b600160008281548110610b6457610b63611729565b5b9060005260206000209060040201600201541115610bbb57600160008281548110610b9257610b91611729565b5b906000526020600020906004020160030160006101000a81548160ff0219169083151502179055505b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610be581610bd2565b8114610bf057600080fd5b50565b600081359050610c0281610bdc565b92915050565b600060208284031215610c1e57610c1d610bc8565b5b6000610c2c84828501610bf3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c6f578082015181840152602081019050610c54565b60008484015250505050565b6000601f19601f8301169050919050565b6000610c9782610c35565b610ca18185610c40565b9350610cb1818560208601610c51565b610cba81610c7b565b840191505092915050565b610cce81610bd2565b82525050565b60008115159050919050565b610ce981610cd4565b82525050565b60006080820190508181036000830152610d098187610c8c565b90508181036020830152610d1d8186610c8c565b9050610d2c6040830185610cc5565b610d396060830184610ce0565b95945050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d8482610c7b565b810181811067ffffffffffffffff82111715610da357610da2610d4c565b5b80604052505050565b6000610db6610bbe565b9050610dc28282610d7b565b919050565b600067ffffffffffffffff821115610de257610de1610d4c565b5b610deb82610c7b565b9050602081019050919050565b82818337600083830152505050565b6000610e1a610e1584610dc7565b610dac565b905082815260208101848484011115610e3657610e35610d47565b5b610e41848285610df8565b509392505050565b600082601f830112610e5e57610e5d610d42565b5b8135610e6e848260208601610e07565b91505092915050565b60008060408385031215610e8e57610e8d610bc8565b5b600083013567ffffffffffffffff811115610eac57610eab610bcd565b5b610eb885828601610e49565b925050602083013567ffffffffffffffff811115610ed957610ed8610bcd565b5b610ee585828601610e49565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f1a82610eef565b9050919050565b610f2a81610f0f565b8114610f3557600080fd5b50565b600081359050610f4781610f21565b92915050565b60008060408385031215610f6457610f63610bc8565b5b6000610f7285828601610bf3565b9250506020610f8385828601610f38565b9150509250929050565b6000602082019050610fa26000830184610ce0565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610ff082610c35565b610ffa8185610fd4565b935061100a818560208601610c51565b61101381610c7b565b840191505092915050565b61102781610bd2565b82525050565b61103681610cd4565b82525050565b600060808301600083015184820360008601526110598282610fe5565b915050602083015184820360208601526110738282610fe5565b9150506040830151611088604086018261101e565b50606083015161109b606086018261102d565b508091505092915050565b60006110b2838361103c565b905092915050565b6000602082019050919050565b60006110d282610fa8565b6110dc8185610fb3565b9350836020820285016110ee85610fc4565b8060005b8581101561112a578484038952815161110b85826110a6565b9450611116836110ba565b925060208a019950506001810190506110f2565b50829750879550505050505092915050565b6000602082019050818103600083015261115681846110c7565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006111968383610fe5565b905092915050565b6000602082019050919050565b60006111b68261115e565b6111c08185611169565b9350836020820285016111d28561117a565b8060005b8581101561120e57848403895281516111ef858261118a565b94506111fa8361119e565b925060208a019950506001810190506111d6565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611258838361101e565b60208301905092915050565b6000602082019050919050565b600061127c82611220565b611286818561122b565b93506112918361123c565b8060005b838110156112c25781516112a9888261124c565b97506112b483611264565b925050600181019050611295565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611307838361102d565b60208301905092915050565b6000602082019050919050565b600061132b826112cf565b61133581856112da565b9350611340836112eb565b8060005b8381101561137157815161135888826112fb565b975061136383611313565b925050600181019050611344565b5085935050505092915050565b6000608082019050818103600083015261139881876111ab565b905081810360208301526113ac81866111ab565b905081810360408301526113c08185611271565b905081810360608301526113d48184611320565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061142657607f821691505b602082108103611439576114386113df565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026114a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611464565b6114ab8683611464565b95508019841693508086168417925050509392505050565b6000819050919050565b60006114e86114e36114de84610bd2565b6114c3565b610bd2565b9050919050565b6000819050919050565b611502836114cd565b61151661150e826114ef565b848454611471565b825550505050565b600090565b61152b61151e565b6115368184846114f9565b505050565b5b8181101561155a5761154f600082611523565b60018101905061153c565b5050565b601f82111561159f576115708161143f565b61157984611454565b81016020851015611588578190505b61159c61159485611454565b83018261153b565b50505b505050565b600082821c905092915050565b60006115c2600019846008026115a4565b1980831691505092915050565b60006115db83836115b1565b9150826002028217905092915050565b6115f482610c35565b67ffffffffffffffff81111561160d5761160c610d4c565b5b611617825461140e565b61162282828561155e565b600060209050601f8311600181146116555760008415611643578287015190505b61164d85826115cf565b8655506116b5565b601f1984166116638661143f565b60005b8281101561168b57848901518255600182019150602085019450602081019050611666565b868310156116a857848901516116a4601f8916826115b1565b8355505b6001600288020188555050505b505050505050565b7f596f7527766520616c726561647920766f746564000000000000000000000000600082015250565b60006116f3601483610c40565b91506116fe826116bd565b602082019050919050565b60006020820190508181036000830152611722816116e6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f416c726561647920657865637574656400000000000000000000000000000000600082015250565b600061178e601083610c40565b915061179982611758565b602082019050919050565b600060208201905081810360008301526117bd81611781565b9050919050565b7f496e76616c69642070726f706f73616c00000000000000000000000000000000600082015250565b60006117fa601083610c40565b9150611805826117c4565b602082019050919050565b60006020820190508181036000830152611829816117ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061186a82610bd2565b915061187583610bd2565b925082820190508082111561188d5761188c611830565b5b9291505056fea26469706673582212203d7b724afddb439631ecedd4976763c149d32c79ce828c44bae0ba4c6cd785a264736f6c634300081c0033";

type KryptoDAOConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KryptoDAOConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KryptoDAO__factory extends ContractFactory {
  constructor(...args: KryptoDAOConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      KryptoDAO & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): KryptoDAO__factory {
    return super.connect(runner) as KryptoDAO__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KryptoDAOInterface {
    return new Interface(_abi) as KryptoDAOInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): KryptoDAO {
    return new Contract(address, _abi, runner) as unknown as KryptoDAO;
  }
}
