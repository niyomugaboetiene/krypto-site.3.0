/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { KryptoDAO, KryptoDAOInterface } from "../../dao.sol/KryptoDAO";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    name: "CreateProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "Execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "GetProposal",
    outputs: [
      {
        internalType: "string[]",
        name: "names",
        type: "string[]",
      },
      {
        internalType: "string[]",
        name: "descriptions",
        type: "string[]",
      },
      {
        internalType: "uint256[]",
        name: "voteCounts",
        type: "uint256[]",
      },
      {
        internalType: "bool[]",
        name: "executedFlags",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "VoteProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "hasVoted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506115568061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063013cf08b1461006757806309eef43e1461009a5780630df07b81146100ca57806381cc0a38146100e657806389b1449114610102578063ddb556f114610123575b600080fd5b610081600480360381019061007c91906109f6565b61013f565b6040516100919493929190610add565b60405180910390f35b6100b460048036038101906100af9190610b8e565b61029c565b6040516100c19190610bbb565b60405180910390f35b6100e460048036038101906100df9190610d0b565b6102bc565b005b61010060048036038101906100fb91906109f6565b610368565b005b61010a610546565b60405161011a949392919061100b565b60405180910390f35b61013d600480360381019061013891906109f6565b610882565b005b6000818154811061014f57600080fd5b90600052602060002090600402016000915090508060000180546101729061109b565b80601f016020809104026020016040519081016040528092919081815260200182805461019e9061109b565b80156101eb5780601f106101c0576101008083540402835291602001916101eb565b820191906000526020600020905b8154815290600101906020018083116101ce57829003601f168201915b5050505050908060010180546102009061109b565b80601f016020809104026020016040519081016040528092919081815260200182805461022c9061109b565b80156102795780601f1061024e57610100808354040283529160200191610279565b820191906000526020600020905b81548152906001019060200180831161025c57829003601f168201915b5050505050908060020154908060030160009054906101000a900460ff16905084565b60016020528060005260406000206000915054906101000a900460ff1681565b600060405180608001604052808481526020018381526020016000815260200160001515815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000190816103219190611278565b5060208201518160010190816103379190611278565b506040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156103f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ec90611396565b60405180910390fd5b60008181548110610409576104086113b6565b5b906000526020600020906004020160030160009054906101000a900460ff1615610468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045f90611431565b60405180910390fd5b60008054905081106104af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a69061149d565b60405180910390fd5b6001600082815481106104c5576104c46113b6565b5b906000526020600020906004020160020160008282546104e591906114ec565b9250508190555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6060806060806000808054905090508067ffffffffffffffff81111561056f5761056e610be0565b5b6040519080825280602002602001820160405280156105a257816020015b606081526020019060019003908161058d5790505b5094508067ffffffffffffffff8111156105bf576105be610be0565b5b6040519080825280602002602001820160405280156105f257816020015b60608152602001906001900390816105dd5790505b5093508067ffffffffffffffff81111561060f5761060e610be0565b5b60405190808252806020026020018201604052801561063d5781602001602082028036833780820191505090505b5092508067ffffffffffffffff81111561065a57610659610be0565b5b6040519080825280602002602001820160405280156106885781602001602082028036833780820191505090505b50915060005b8181101561087a5760008082815481106106ab576106aa6113b6565b5b906000526020600020906004020190508060000180546106ca9061109b565b80601f01602080910402602001604051908101604052809291908181526020018280546106f69061109b565b80156107435780601f1061071857610100808354040283529160200191610743565b820191906000526020600020905b81548152906001019060200180831161072657829003601f168201915b505050505087838151811061075b5761075a6113b6565b5b60200260200101819052508060010180546107759061109b565b80601f01602080910402602001604051908101604052809291908181526020018280546107a19061109b565b80156107ee5780601f106107c3576101008083540402835291602001916107ee565b820191906000526020600020905b8154815290600101906020018083116107d157829003601f168201915b5050505050868381518110610806576108056113b6565b5b60200260200101819052508060020154858381518110610829576108286113b6565b5b6020026020010181815250508060030160009054906101000a900460ff1684838151811061085a576108596113b6565b5b60200260200101901515908115158152505050808060010191505061068e565b505090919293565b60008054905081106108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c09061149d565b60405180910390fd5b600081815481106108dd576108dc6113b6565b5b906000526020600020906004020160030160009054906101000a900460ff161561093c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093390611431565b60405180910390fd5b600160008281548110610952576109516113b6565b5b90600052602060002090600402016002015411156109a9576001600082815481106109805761097f6113b6565b5b906000526020600020906004020160030160006101000a81548160ff0219169083151502179055505b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6109d3816109c0565b81146109de57600080fd5b50565b6000813590506109f0816109ca565b92915050565b600060208284031215610a0c57610a0b6109b6565b5b6000610a1a848285016109e1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a5d578082015181840152602081019050610a42565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a8582610a23565b610a8f8185610a2e565b9350610a9f818560208601610a3f565b610aa881610a69565b840191505092915050565b610abc816109c0565b82525050565b60008115159050919050565b610ad781610ac2565b82525050565b60006080820190508181036000830152610af78187610a7a565b90508181036020830152610b0b8186610a7a565b9050610b1a6040830185610ab3565b610b276060830184610ace565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5b82610b30565b9050919050565b610b6b81610b50565b8114610b7657600080fd5b50565b600081359050610b8881610b62565b92915050565b600060208284031215610ba457610ba36109b6565b5b6000610bb284828501610b79565b91505092915050565b6000602082019050610bd06000830184610ace565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c1882610a69565b810181811067ffffffffffffffff82111715610c3757610c36610be0565b5b80604052505050565b6000610c4a6109ac565b9050610c568282610c0f565b919050565b600067ffffffffffffffff821115610c7657610c75610be0565b5b610c7f82610a69565b9050602081019050919050565b82818337600083830152505050565b6000610cae610ca984610c5b565b610c40565b905082815260208101848484011115610cca57610cc9610bdb565b5b610cd5848285610c8c565b509392505050565b600082601f830112610cf257610cf1610bd6565b5b8135610d02848260208601610c9b565b91505092915050565b60008060408385031215610d2257610d216109b6565b5b600083013567ffffffffffffffff811115610d4057610d3f6109bb565b5b610d4c85828601610cdd565b925050602083013567ffffffffffffffff811115610d6d57610d6c6109bb565b5b610d7985828601610cdd565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610dcb82610a23565b610dd58185610daf565b9350610de5818560208601610a3f565b610dee81610a69565b840191505092915050565b6000610e058383610dc0565b905092915050565b6000602082019050919050565b6000610e2582610d83565b610e2f8185610d8e565b935083602082028501610e4185610d9f565b8060005b85811015610e7d5784840389528151610e5e8582610df9565b9450610e6983610e0d565b925060208a01995050600181019050610e45565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610ec4816109c0565b82525050565b6000610ed68383610ebb565b60208301905092915050565b6000602082019050919050565b6000610efa82610e8f565b610f048185610e9a565b9350610f0f83610eab565b8060005b83811015610f40578151610f278882610eca565b9750610f3283610ee2565b925050600181019050610f13565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610f8281610ac2565b82525050565b6000610f948383610f79565b60208301905092915050565b6000602082019050919050565b6000610fb882610f4d565b610fc28185610f58565b9350610fcd83610f69565b8060005b83811015610ffe578151610fe58882610f88565b9750610ff083610fa0565b925050600181019050610fd1565b5085935050505092915050565b600060808201905081810360008301526110258187610e1a565b905081810360208301526110398186610e1a565b9050818103604083015261104d8185610eef565b905081810360608301526110618184610fad565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110b357607f821691505b6020821081036110c6576110c561106c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261112e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826110f1565b61113886836110f1565b95508019841693508086168417925050509392505050565b6000819050919050565b600061117561117061116b846109c0565b611150565b6109c0565b9050919050565b6000819050919050565b61118f8361115a565b6111a361119b8261117c565b8484546110fe565b825550505050565b600090565b6111b86111ab565b6111c3818484611186565b505050565b5b818110156111e7576111dc6000826111b0565b6001810190506111c9565b5050565b601f82111561122c576111fd816110cc565b611206846110e1565b81016020851015611215578190505b611229611221856110e1565b8301826111c8565b50505b505050565b600082821c905092915050565b600061124f60001984600802611231565b1980831691505092915050565b6000611268838361123e565b9150826002028217905092915050565b61128182610a23565b67ffffffffffffffff81111561129a57611299610be0565b5b6112a4825461109b565b6112af8282856111eb565b600060209050601f8311600181146112e257600084156112d0578287015190505b6112da858261125c565b865550611342565b601f1984166112f0866110cc565b60005b82811015611318578489015182556001820191506020850194506020810190506112f3565b868310156113355784890151611331601f89168261123e565b8355505b6001600288020188555050505b505050505050565b7f596f7527766520616c726561647920766f746564000000000000000000000000600082015250565b6000611380601483610a2e565b915061138b8261134a565b602082019050919050565b600060208201905081810360008301526113af81611373565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f416c726561647920657865637574656400000000000000000000000000000000600082015250565b600061141b601083610a2e565b9150611426826113e5565b602082019050919050565b6000602082019050818103600083015261144a8161140e565b9050919050565b7f496e76616c69642070726f706f73616c00000000000000000000000000000000600082015250565b6000611487601083610a2e565b915061149282611451565b602082019050919050565b600060208201905081810360008301526114b68161147a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114f7826109c0565b9150611502836109c0565b925082820190508082111561151a576115196114bd565b5b9291505056fea2646970667358221220a8a3a24e099b8763e8b572834bfff59f23b4fe3847ae533470c4009dbdfc452364736f6c634300081c0033";

type KryptoDAOConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KryptoDAOConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KryptoDAO__factory extends ContractFactory {
  constructor(...args: KryptoDAOConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      KryptoDAO & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): KryptoDAO__factory {
    return super.connect(runner) as KryptoDAO__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KryptoDAOInterface {
    return new Interface(_abi) as KryptoDAOInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): KryptoDAO {
    return new Contract(address, _abi, runner) as unknown as KryptoDAO;
  }
}
