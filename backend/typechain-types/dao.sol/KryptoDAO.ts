/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace KryptoDAO {
  export type ProposalStruct = {
    name: string;
    description: string;
    voteCount: BigNumberish;
    executed: boolean;
  };

  export type ProposalStructOutput = [
    name: string,
    description: string,
    voteCount: bigint,
    executed: boolean
  ] & {
    name: string;
    description: string;
    voteCount: bigint;
    executed: boolean;
  };
}

export interface KryptoDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CreateProposal"
      | "Execute"
      | "Executed"
      | "GetProposal"
      | "VoteProposal"
      | "hasVoted"
      | "proposals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CreateProposal",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "Execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "Executed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GetProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VoteProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CreateProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Executed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GetProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VoteProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
}

export interface KryptoDAO extends BaseContract {
  connect(runner?: ContractRunner | null): KryptoDAO;
  waitForDeployment(): Promise<this>;

  interface: KryptoDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CreateProposal: TypedContractMethod<
    [_name: string, _description: string],
    [void],
    "nonpayable"
  >;

  Execute: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  Executed: TypedContractMethod<[], [KryptoDAO.ProposalStructOutput[]], "view">;

  GetProposal: TypedContractMethod<
    [],
    [
      [string[], string[], bigint[], boolean[]] & {
        names: string[];
        descriptions: string[];
        voteCounts: bigint[];
        executedFlags: boolean[];
      }
    ],
    "view"
  >;

  VoteProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  hasVoted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        name: string;
        description: string;
        voteCount: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CreateProposal"
  ): TypedContractMethod<
    [_name: string, _description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Execute"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "Executed"
  ): TypedContractMethod<[], [KryptoDAO.ProposalStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "GetProposal"
  ): TypedContractMethod<
    [],
    [
      [string[], string[], bigint[], boolean[]] & {
        names: string[];
        descriptions: string[];
        voteCounts: bigint[];
        executedFlags: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "VoteProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        name: string;
        description: string;
        voteCount: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  filters: {};
}
